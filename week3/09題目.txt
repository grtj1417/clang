9. 直線方程式

直線方程式有兩種運算方式:
1.給定平面上兩個點，求直線方程式 y = mx + b，
m = (y1 - y2) / (x1 - x2)
b = (x2 * y1 - x1 * y2) / (x2 - x1)

2.給定直線方程式，求交點，
L1: a1y = b1x + c1
L2: a2y = b2x + c2
L3: a3y = b3x + c3

Ex:
L1: y = -x - 1
L2: y = 2x + 1
L3: y = x + 1

L1與L2可得交點 (-0.67, -0.33)
L1與L3可得交點 (-1.00, 0.00)
L2與L3可得交點 (0.00, 1.00)

當運算方式為第一種，題目會給定兩點座標，請按公式求出直線方程式，直線不會有垂直狀況。
當運算方式為第二種，題目會給定三個直線方程式，請按求交點公式找出所有交點，三個直線方程式一定有三個交點
並對所有交點進行排序，以 x 值小到大進行排序，若 x 值相同，以 y 值小到大進行排序。

【注意事項】
輸出格式: y = ax + b
1. 若x項係數 a 為 1時，輸出格式應為 y = x + b ， 而不是 y = 1x + b
2. 若x項係數 a 為 -1時，輸出格式應為 y = -x + b ， 而不是 y = -1x + b
3. 若x項係數 a 為 0且b > 0時，輸出格式應為 y = b
4. 若x項係數 a 為 0且b < 0時，輸出格式應為 y = -b

------------------------------------------------------

輸入說明:
第一行輸入一正整數 N (1 <= N <= 2)，1 代表平面上兩點求直線方程式，2 代表直線方程式求交點
第二行開始輸入格式如下:
當 N = 1，
第二行輸入一正整數 K (1 <= K <= 5)，代表其後有多少筆輸入測資。
第三行輸入平面上兩個點座標位置x1, y1, x2, y2 ( -20 <= x1, y1, x2, y2 <= 20)，以空格符號隔開，座標以整數表示
其後K - 1行，跟第三行輸入格式相同。

當 N = 2，
第二到四行各輸入三個數字，分別代表三條直線方程式中的各項係數
第二行輸入係數a1, b1, c1，以空格符號隔開
第三行輸入係數a2, b2, c2，以空格符號隔開
第四行輸入係數a3, b3, c3，以空格符號隔開
所有係數的範圍皆在[-20, 20]中，皆以整數表示


輸出說明:
根據選擇的運算方式，輸出其運算的結果。
當N = 1時，輸出格式為 y = mx + b，且m, b的值須化為最簡分數，
若 m 或 b 為 0，則那一項不輸出
當N = 2時，輸出格式為一行一個已排序的交點(x, y)，x, y以浮點數輸出，四捨五入取到小數點第二位，中間以空格符號分開

---------------------------------------------------------

範例輸入1:
1
5
2 -2 7 2
1 3 5 -3
5 2 -3 -2
3 1 -1 4
5 10 -3 10

-6/4
範例輸出1:
y = 4/5x - 18/5
y = -3/2x + 9/2
y = 1/2x - 1/2
y = -3/4x + 13/4
y = 10

--------------------------------------------------------

範例輸入2:
1
5
0 2 1 3
0 -1 2 -3
-2 -5 1 4
3 -6 -4 8
-1 -1 -6 -4

2/-2
1/-1
範例輸出2:
y = x + 2
y = -x - 1
y = 3x + 1
y = -2x
y = 3/5x - 2/5

--------------------------------------------------------

範例輸入3:
2
1 1 5
1 4 6
1 -1 1


範例輸出3:
(-2.00, 3.00)
(-1.00, 2.00)
(-0.33, 4.67)

--------------------------------------------------------

範例輸入4:
2
2 3 6
2 -3 0
2 1 -4


範例輸出4:
(-5.00, -4.50)
(-1.00, 1.50)
(1.00, -1.50)

--------------------------------------------------------

範例輸入5:
2
1 1 4
1 -2 -2
2 1 4


範例輸出5:
(-4.00, 0.00)
(-2.00, 2.00)
(-1.60, 1.20)

gcc -fprofile-arcs -ftest-coverage -o main main.c

gcov -b -c main.c

Add-AppxPackage .\Ubuntu_1804.2019.522.0_x64.appx

sudo apt-get update
sudo apt-get install g++

sudo apt-get install make

sudo apt-get install libgtest-dev

sudo apt-get install cmake

cd /usr/src/gtest

sudo cmake CMakeLists.txt

sudo make

sudo cp *.a /usr/lib

g++ -pg -fprofile-arcs -ftest-coverage ut.cpp -o ut -lgtest -lpthread

gcc -fprofile-arcs -ftest-coverage -o main main.c

gcov -c -b ut.cpp

sudo apt-get install -y lcov

lcov -c -o ut.info -d . --rc lcov_branch_coverage=1

genhtml ut.info -o report --branch-coverage

g++ -pg -fprofile-arcs -ftest-coverage bmi.cpp ut.cpp -o ut -lgtest -lpthread

gcov -c -b ut.cpp

#include <stdio.h>
#include <math.h>
#include <stdlib.h>

struct Line {
    double a, b, c; // ax + by = c
};

int N1();
int solve(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y);
void get_intersection(struct Line l1, struct Line l2, double *x, double *y) ;
int GCD(int t, int v);

int main()
{
    int M, N, time;
    
    scanf("%d\n", &N);
    if(N == 1){
        scanf("%d\n", &time);
        for(int i = 0; i < time; i++){
        N1();
        }
        return 0;
    }

    if(N == 2){
        double x1,x2,x3,y1,y2,y3;
        // 讀入 3 條直線
        struct Line lines[3];
        for (int i = 0; i < 3; i++) {
            scanf("%lf %lf %lf", &lines[i].a, &lines[i].b, &lines[i].c);
        }

        // 計算任意兩條直線的交點

        get_intersection(lines[0], lines[1], &x1, &y1);
        get_intersection(lines[0], lines[2], &x2, &y2);
        get_intersection(lines[1], lines[2], &x3, &y3);

        // printf("(%.2lf, %.2lf)\n", x1, y1);
        // printf("(%.2lf, %.2lf)\n", x2, y2);
        // printf("(%.2lf, %.2lf)\n", x3, y3);

        if(x2 > x1 && x1 > x3){
            printf("(%.2lf, %.2lf)\n", x3, y3);
            printf("(%.2lf, %.2lf)\n", x1, y1);
            printf("(%.2lf, %.2lf)\n", x2, y2);
        }else if(x3 > x1 && x1 > x2){
            printf("(%.2lf, %.2lf)\n", x2, y2);
            printf("(%.2lf, %.2lf)\n", x1, y1);
            printf("(%.2lf, %.2lf)\n", x3, y3);
        }else {
            printf("(%.2lf, %.2lf)\n", x2, y2);
            printf("(%.2lf, %.2lf)\n", x3, y3);
            printf("(%.2lf, %.2lf)\n", x1, y1);
        }
    }
    
    return 0;
}

int N1()
{
    int x1=0, x2=0, y1=0, y2=0;
    scanf("\n%d %d %d %d", &x1, &y1, &x2, &y2);
    // printf("%d %d %d %d", x1, x2, y1, y2);
    int m = 0, b = 0;
    int m_temp_upper, m_temp_lower, b_temp_upper, b_temp_lower;

    //m
    m_temp_upper = (y1 - y2); m_temp_lower = (x1 - x2);

    int gcd = abs(GCD(m_temp_upper, m_temp_lower));
    m_temp_upper /= gcd; m_temp_lower /= gcd;

    //分子分母皆為負數時
    if(m_temp_upper < 0 && m_temp_lower < 0){
        m_temp_upper *= -1;
        m_temp_lower *= -1;
    //分子為正、分母為負 轉換
    }else if(m_temp_upper > 0 && m_temp_lower < 0){
        m_temp_upper *= -1;
        m_temp_lower *= -1;
    }


    //b
    b_temp_upper = (x2 * y1 - x1 * y2); b_temp_lower = (x2 - x1);
    gcd = GCD(b_temp_upper, b_temp_lower);
    b_temp_upper /= gcd; b_temp_lower /= gcd;


    printf("y = ");
    int x_exist = 0;
    if(m_temp_upper != 0)
    {
        if (m_temp_upper / m_temp_lower == 1 && m_temp_lower == 1) {
            printf("x");
            x_exist = 1;
        } else if (m_temp_upper == 1 && m_temp_lower == -1) {
            printf("-x");
            x_exist = 1;
        } else if (m_temp_upper == -1 && m_temp_lower == 1) {
            printf("-x");
        }else if(m_temp_lower == 1 ){
            printf("%dx", m_temp_upper);
            x_exist = 1;
        }else if(m_temp_upper > 0 && m_temp_lower < 0){
            printf("-%d/%dx", abs(m_temp_upper), abs(m_temp_lower));
            x_exist = 1;
        }else if(m_temp_upper < 0 && m_temp_lower > 0){
            printf("-%d/%dx", abs(m_temp_upper), abs(m_temp_lower));
            x_exist = 1;
        }else {
            printf("%d/%dx", m_temp_upper, m_temp_lower);
            x_exist = 1;
        }
    }
    
    if(x_exist == 1){
        if (b_temp_upper > 0 && b_temp_lower > 0) {
            printf(" + ");
        } else if (b_temp_upper < 0 && b_temp_lower < 0) {
            printf(" + ");
        } else if (b_temp_upper < 0 && b_temp_lower > 0) {
            printf(" - ");
        } else if (b_temp_upper > 0 && b_temp_lower < 0) {
            printf(" - ");
        }
    }
    
    if(b_temp_upper !=0){
        if(b_temp_upper / b_temp_lower == -1){
            printf(" - 1");
        }else if (b_temp_lower == 1) {
            printf("%d", abs(b_temp_upper));
        }else printf("%d/%d", abs(b_temp_upper), abs(b_temp_lower));
    }
    
    printf("\n");
    return 0;
}

int solve(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y)
{
    double d = a1 * b2 - a2 * b1;
    if (d == 0) {
        return 0; // 方程無解
    }
    *y = (c1 * b2 - c2 * b1) / d;
    *x = -1 * (a1 * c2 - a2 * c1) / d;
    if(*y == 0){
        *y = abs(*y);
    }
    return 1;
}

void get_intersection(struct Line l1, struct Line l2, double *x, double *y) 
{
    solve(l1.a, l1.b, l1.c, l2.a, l2.b, l2.c, x, y);
}

int GCD(int t, int v)
{
    if (t % v == 0){
        return v;
    }else{
        return GCD(v, t % v);
    }
}