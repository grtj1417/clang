16 - 棒球比賽排序

請計算一支球隊依照球員打擊順序，輸出每位球員各別的編號、安打數及打點數。
輸出結果需使用排序法進行排序，以打點數大到小進行排序，
若打點數相同，以安打數大到小進行排序，
若打點數與安打數皆相同，則以編號小到大進行排序。

棒球規則如下：
球場上有四個壘包， 稱為本壘、一、二和三壘。
球員在本壘握球棒打擊的稱「擊球員」 ，在另外三個壘包的稱為「跑壘員」。
當擊球員擊出「安打」時， 擊球員與跑壘員可移動；
「出局」時，跑壘員不動，擊球員離場換下一位。

擊球員打擊情況如下：
安打：以1B, 2B, 3B 和 HR 代表一、二、三和全(四)壘打。
出局：以 FO 表示 Flyball out, GO 表示 Groundball out, 及 SO 代表 Strike out。
打點數：打擊情況為安打時，當下有多少個球員(擊球員和跑壘員)跑回至本壘得分，其打點數就為多少。

簡化版的棒球比賽規則，球員會依據編號依序上場打擊，
第1位擊球員編號為1，接著第2位擊球員編號為2，接著 3, ..., 9位擊球員。
擊球員打出 K 壘安打時，場上球員(擊球員和跑壘員)會前進 K 個壘包。
本壘到一壘，接著二、三壘，最後回到本壘。當球員回到本壘時可得 1分。
總局數只有五局，每一局達三個出局數，壘包須清空(跑壘員都得離開)，並重新開啟新一局。


---------------------------------------------------

輸入說明:
輸入測資共有九行，第一行為球員編號1的打擊狀況，依此類推，
每一行一開始有一個正整數 N (1 <= N <= 9)，代表該球員總共打擊 N 次 ，
同一行後有 N 個字串(均為兩字元)，依序代表每次打擊結果，字串間以空白字元相隔開。

輸出說明:
第一行輸出總得分，
第二行至第十行，輸出排序後球員的編號，安打數及打點數，數字間以空白字元相隔開。

---------------------------------------------------

範例輸入1：
2 FO SO
2 GO GO
2 SO FO
2 GO FO
2 SO GO
2 GO GO
1 FO
1 GO
1 SO

範例輸出1：
0
1 0 0
2 0 0
3 0 0
4 0 0
5 0 0
6 0 0
7 0 0
8 0 0
9 0 0

---------------------------------------------------

範例輸入2：
4 1B SO SO 1B
4 1B FO 1B 1B
4 HR HR HR SO
4 GO 1B 2B FO
4 2B 2B 3B GO
4 3B SO 1B 1B
4 1B FO FO 1B
4 GO 1B SO SO
4 SO 1B 1B GO

範例輸出2：
12
3 3 8
6 3 2
5 3 1
7 2 1
2 3 0
1 2 0
4 2 0
9 2 0
8 1 0

1 2 0
2 3 0
3 3 8
4 2 0
5 3 1
6 3 2
7 2 1
8 1 0
9 2 0
---------------------------------------------------

範例輸入3：
5 1B SO 1B 2B SO
5 1B FO HR 1B 2B
5 1B 2B SO GO 1B
5 SO 2B 1B 2B SO
5 FO 1B HR HR SO
4 HR HR 3B SO
4 1B SO 1B SO
4 HR FO SO 1B
4 2B 3B GO 1B

範例輸出3：
22
6 3 7
5 3 5
2 4 3
4 3 2
8 2 2
1 3 1
3 3 1
7 2 1
9 3 0

1 3 1
2 4 3
3 3 1
4 3 2
5 3 5
6 3 7
7 2 1
8 2 2
9 3 0
---------------------------------------------------

範例輸入4：
4 FO SO 1B HR
4 GO GO 2B 1B
4 2B 1B SO FO
4 3B GO 2B FO
4 1B 1B SO 2B
4 GO HR GO 1B
4 HR FO 3B SO
3 3B GO 1B
3 SO 2B 1B

範例輸出4：
14
6 2 4
1 2 3
4 2 3
5 3 1
2 2 1
7 2 1
8 2 1
3 2 0
9 2 0

1 2 3
2 2 1
3 2 0
4 2 3
5 3 1
6 2 4
7 2 1
8 2 1
9 2 0
---------------------------------------------------

範例輸入5：
6 1B FO 1B 1B 1B SO
5 GO 2B GO 1B 1B
5 SO 2B FO HR 2B
5 GO 2B SO HR 3B
5 SO 1B GO HR 3B
5 1B GO 1B GO 2B
5 1B 3B FO 1B 1B
5 1B 3B GO 1B 1B
5 1B 3B SO 2B 1B


範例輸出5：
23
3 3 6
4 3 4
9 4 3
2 3 3
1 4 2
8 4 2
5 3 2
6 3 1
7 4 0

1 4 2
2 3 3
3 3 6
4 3 4
5 3 2
6 3 1
7 4 0
8 4 2
9 4 3


可能用的到的垃圾
// bool not_yet_sorted(int batter_to_int[10])
// {
//     //如果後兩位相同，且[i]第一位 > [i+1]第一位 true
//     for(int i = 1; i <= 9; i++){
//         int batter1 = (batter_to_int[i]/100)%10 + (batter_to_int[i]/10)%10;
//         int batter2 = (batter_to_int[i+1]/100)%10 + (batter_to_int[i+1]/10)%10;
//         if(batter1 == batter2 && batter_to_int[i]%10 > batter_to_int[i + 1]%10)
//         return true;
//     }
//     return false;
// }
// void frist_index_sort(int batter_to_int[10])
// {
//     while(not_yet_sorted){
//         //find back index
//         int back_index;
//         for (int i = 1; i <= 9; i++)
//         {
//             if(batter_to_int[i] % 10 == batter_to_int[i + 1] % 10){
//                 back_index = i;
//                 break;
//             }
//         }

//         //找到重複的存進temp
//         int temp[10];
//         int temp_index = 0;
//         for(int i = 1; i <= 9; i++){
//             if(batter_to_int[i] == batter_to_int[i + 1]){
//                 temp[temp_index] = batter_to_int[i];
//                 temp_index++;
//             }else break;
//         }

//         //排序找出的東東
//         selectionSort(temp);

//         //還回batter_to_int
//         for(int i = 0; temp[i] = '\0'; i++){
//             batter_to_int[back_index] = temp[i];
//         }
//     }
// }


    // 如果第1、2個index一樣，抓出第0個index到sort_index_zero
    // int sort_index_zero[10];
    // int takeout_index = 0, current_index = 0;
    // for (int i = 1; i < 10; )
    // {
    //     int isDup = 0; // 每回重置
    //     for (int j = i + 1; j < 10; j++)
    //     {
    //         if (batter_to_int[i] % 10 + (batter_to_int[i] / 10) % 10 == batter_to_int[j] % 10 + (batter_to_int[j] / 10) % 10)
    //         {
    //             takeout_index = i;
    //             i++;
    //             // 從第i個放
    //             sort_index_zero[current_index] = (batter_to_int[i] / 100) % 10;
    //             printf("%d\n", (batter_to_int[i] / 100) % 10);
    //             current_index++;
    //             isDup = 1;
    //         }

    //     }
    //     if (isDup)//如果有重複，i自己也要放進去
    //     {
    //         sort_index_zero[current_index] = (batter_to_int[i] / 100) % 10;
    //         current_index++;
    //     }
    //     selectionSort(sort_index_zero);
    //     for (int k = 1; k < current_index; k++){
    //         printf("here%d\n",sort_index_zero[k]);
    //     }
    //     // 放回去
    //     for (int k = 1; k < current_index; k++)
    //     {
    //         batter_to_int[i] = sort_index_zero[k];
    //     }
    // }

