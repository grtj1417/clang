17. 數字反序

請輸入一個長度為n的整數數列 A = (a[1], a[2], a[3], ..., a[n] )，
請計算該整數數列的反序總數。

反序的定義為：
如果數列 A 中任意兩個數字 a[i] 和 a[j] ( 0 <= i, j <= n) 滿足 i < j 且 a[i] > a[j]，
則稱 (a[i], a[j]) 是 A 中的一個反序 (inversion)。

定義 W(A) 為 A 中反序數量。
例如，在數列 A = (3, 1, 9, 8, 9, 2)中，共有 (3, 1)、(3, 2)、(9, 8)、(9, 2)、 (8, 2)、(9, 2) 6個反序 ，所以 W(A) = 6。

若要對整數數列進行做檢查，找出所有反序數量 ，
但如果整數數列過長時，計算時間會超過系統的給定時限，
因此需運用以下分而治之(divide and conquer)策略所設計更有效率的方法。

分而治之的策略為：
1. 將A等分為前後兩個數列 X 與 Y，其中 X 的長度是 n/2。
2. 遞迴計算 W(X) 和 W(Y) 。
3. 計算W(A) = W(X) + W(Y) + S(X, Y)，其中 S(X, Y) 是由 X 中的數字與 Y 中的數字構成的反序數量 。

---------------------------------------------------

輸入說明:
第一行輸入一整數m (15 <= m <= 100)，代表整數序列長度。
第二行輸入一串長度為m的整數序列，數字間以空白字元相隔開，其中整數序列的整數b大小為 0 <= b <= 9。

輸出說明:
第一行輸出該組數列反序的總數s。

---------------------------------------------------

範例輸入1：
15
3 1 9 8 9 2 2 7 6 5 4 1 4 3 5

範例輸出1：
57

---------------------------------------------------

範例輸入2：
30
3 1 9 8 9 2 2 7 6 5 4 1 4 3 5 3 1 9 8 9 2 2 7 6 5 4 1 4 3 5

範例輸出2：
213

---------------------------------------------------

範例輸入3：
50
9 7 7 2 4 0 2 2 0 0 0 3 7 8 4 5 0 2 1 6 5 4 2 3 1 3 9 8 8 4 1 4 8 0 8 9 1 3 5 0 9 8 7 2 6 4 9 4 0 3

範例輸出3：
497

---------------------------------------------------

範例輸入4：
80
4 7 6 8 9 0 9 8 7 7 0 7 8 3 6 4 8 6 8 6 3 2 8 1 3 1 2 9 9 2 3 3 3 7 8 0 8 6 3 3 5 6 8 8 3 5 5 4 8 8 2 3 6 9 5 5 8 6 3 3 1 3 9 4 5 5 2 0 3 1 6 1 3 4 8 0 3 4 4 2

範例輸出4：
1687

---------------------------------------------------

範例輸入5：
100
1 6 0 7 5 0 7 1 8 5 2 2 5 4 8 4 5 7 1 4 4 3 9 9 0 8 3 8 1 5 7 1 0 9 6 7 3 0 3 1 2 0 5 3 8 7 7 0 3 1 5 9 2 4 6 2 7 2 1 9 8 0 9 7 6 2 7 3 8 6 1 0 1 8 7 5 2 0 8 0 5 8 6 0 2 0 3 6 3 3 6 1 5 9 3 2 8 2 2 4

範例輸出5：
2291

999
1 5 6 9 1 9 4 2 1 2 8 4 1 9 0 3 7 7 1 7 7 4 1 7 8 0 5 9 9 5 3 4 4 6 8 3 0 3 4 6 1 3 8 3 0 2 6 2 2 0 9 4 7 3 6 6 3 6 5 5 1 7 6 7 4 7 7 0 4 9 2 5 2 9 8 2 6 6 7 9 6 4 1 9 8 6 8 7 7 2 5 6 1 7 2 8 2 8 0 9 2 5 5 9 5 8 5 5 6 3 6 9 6 8 8 8 1 1 5 1 3 5 4 5 9 6 9 9 4 1 2 7 9 1 4 9 2 5 9 2 5 4 5 3 8 3 7 0 6 2 7 4 9 3 8 0 1 1 1 5 2 7 9 7 4 1 0 2 2 4 4 2 3 4 3 2 5 6 3 4 8 0 9 6 2 5 7 3 6 9 5 6 0 8 1 4 4 6 9 6 0 7 7 7 6 2 7 2 8 7 7 0 8 8 5 0 2 0 2 3 9 5 4 7 5 2 6 8 9 1 1 7 8 6 3 4 9 1 1 0 3 9 2 5 4 8 3 5 7 6 3 0 9 0 9 1 5 5 9 5 1 6 7 2 9 6 2 5 4 8 5 4 5 8 8 6 3 0 0 2 9 0 7 1 9 2 5 9 7 7 2 3 6 1 2 3 5 2 2 9 9 1 4 9 8 2 1 4 2 8 4 5 6 3 1 2 7 5 7 9 2 1 5 3 4 3 1 1 1 1 6 4 2 2 3 0 5 1 5 1 1 3 0 5 7 9 0 2 1 3 2 4 6 6 0 2 2 3 0 8 1 1 4 8 8 1 7 0 5 7 4 4 6 0 5 4 7 3 4 5 2 6 9 3 5 3 6 5 4 2 4 2 3 8 9 6 0 3 6 3 6 4 5 8 5 0 9 9 0 4 1 6 5 7 1 6 8 6 3 8 5 1 7 0 7 0 0 9 7 7 6 8 6 2 2 8 7 1 2 7 4 2 6 1 0 9 0 1 6 9 0 8 1 5 1 8 5 1 2 9 9 6 0 1 7 9 7 1 1 0 8 7 8 3 2 3 1 7 7 8 1 8 8 3 1 7 4 8 6 1 3 2 1 9 6 0 6 5 1 2 0 2 9 6 0 1 5 3 0 2 1 1 0 2 4 9 2 1 3 4 5 5 8 8 5 3 8 4 7 2 2 9 4 0 4 4 8 7 9 3 7 7 6 4 7 0 8 0 4 3 0 7 5 6 4 9 0 2 2 9 5 1 9 3 9 8 8 6 8 3 4 4 3 4 2 7 4 0 5 1 8 7 0 1 2 3 6 6 1 6 1 2 5 0 0 7 9 0 1 5 7 0 5 5 5 4 4 3 7 9 7 4 0 3 3 1 8 2 2 1 1 3 4 3 8 8 6 9 7 3 5 3 4 0 6 9 9 5 7 0 1 3 6 6 5 1 0 3 9 9 8 1 1 9 2 0 5 0 2 8 4 6 2 9 1 8 9 4 9 8 3 9 3 7 8 6 9 9 8 2 3 7 3 4 7 8 9 4 7 4 7 6 2 6 6 1 7 5 1 1 5 2 2 5 8 5 4 7 1 5 8 6 8 9 8 1 1 6 1 8 0 7 9 4 2 0 2 1 7 4 5 3 0 1 8 1 8 9 6 7 7 2 3 3 2 4 9 4 1 6 1 4 5 1 5 7 9 5 7 3 7 6 6 9 4 9 3 3 4 3 1 3 6 1 3 1 1 4 5 5 1 9 5 1 2 1 9 1 9 5 3 8 5 2 6 3 2 0 7 3 0 3 4 5 5 7 7 2 1 4 8 5 1 2 8 7 3 8 2 4 3 5 1 2 0 8 1 4 9 0 0 0 6 2 6 0 9 1 4 1 2 6 8 2 6 4 6 8 0 8 0 6 8 7 3 5 8 0 3 6 2 0 8 4 7 4 0 9 6 5 1 2 3 2 1 5 9 3 7 5 7 5 2 6 0 9 5 2 4 1 6 0 4 1 3 8 3 9 4 0 0 6 7 7 7 8 9 1 2 8 5 7 5 2 9 1 7 1 2 1 0 3 7 4 3 3 9 2 8 3 9 0 5 5 6 3 2 5 5 7 2 0 0 2 2 6 6 3 3 6 1 0 1 8 5 9 6 8 8 8 1 6 4 2 4 5 9 4 4 1 6 2 1 0 4 7 0 1 7 2 0 3 2 1 5 1 1 7 8 5 7 8 0 2 6 6 2 3 6 6